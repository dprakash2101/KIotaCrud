// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaCrud.Client.Models {
    public class Contact : IParsable {
        /// <summary>The age property</summary>
        public int? Age { get; set; }
        /// <summary>The dateTimeCreated property</summary>
        public DateTimeOffset? DateTimeCreated { get; set; }
        /// <summary>The firstName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The isDeleted property</summary>
        public bool? IsDeleted { get; set; }
        /// <summary>The lastName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The nickName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NickName { get; set; }
#nullable restore
#else
        public string NickName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Contact CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Contact();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"age", n => { Age = n.GetIntValue(); } },
                {"dateTimeCreated", n => { DateTimeCreated = n.GetDateTimeOffsetValue(); } },
                {"firstName", n => { FirstName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetIntValue(); } },
                {"isDeleted", n => { IsDeleted = n.GetBoolValue(); } },
                {"lastName", n => { LastName = n.GetStringValue(); } },
                {"nickName", n => { NickName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("age", Age);
            writer.WriteDateTimeOffsetValue("dateTimeCreated", DateTimeCreated);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("isDeleted", IsDeleted);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteStringValue("nickName", NickName);
        }
    }
}
